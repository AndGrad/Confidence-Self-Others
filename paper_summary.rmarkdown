---
title: "Paper short summary"
author: "Andrea Gradassi"
format: html
editor: source

project:
  execute-dir: project
---

```{r setup, include=FALSE}

## load packages 
source("scripts/check_pkgs.R")

## load theme plot
source(paste0(here(), "/scripts/plots/theme_plot_mkdwn.R"))

## set knitting directory
knitr::opts_knit$set(root.dir = here())

## load data
data <- read.csv(paste0(here(), "/data/full_dataset.csv"))

```


# **Social information use is impacted more strongly by others' confidence than by own confidence**

Andrea Gradassi, Wouter van den Bos & Lucas Molleman

## Abstract

Humans live in a fundamentally social world. The behaviour and judgments from friends, colleagues, television hosts and social media feeds affect what we buy, how we dress, and who we vote for. People tend to be more sensitive to social influence when unsure about their beliefs, and assign more weight to social information when its source is highly confident. However, less is known about the relative impact of the confidence of self and others on social information use, and how they jointly shape social transmission. Here we show with two incentivized decision-making experiments that the confidence of others has a substantially larger impact on social information use than people's own confidence. In tasks involving perceptual decisions (experiment 1; N=203) and US election predictions (experiment 2; N=213), participants could adjust their initial judgments upon observing judgments of others and were rewarded for accuracy. Adjustments were most sensitive to the confidence of others, particularly when participants' own confidence was low. Furthermore, confidence also affected adjustment heuristics: confident others prompted participants to compromise more often, rather than to stick with their initial judgments. Our results highlight how sensitivity to others' confidence may a double-edged sword: it can accelerate learning when confidence predicts accuracy, but it also leaves people vulnerable to confident sources of misinformation.

## Demographics


```{r demographics overview, message=FALSE}
## Sample  -----------------------------------------------------------------

## Experiment 1 n of unique ppts
unique_ppts1 <- data %>% 
  dplyr::filter(experiment == "Experiment 1") %>% 
  dplyr::select(ID) %>% 
  n_distinct()

## Experiment 2 n of unique ppts
unique_ppts2 <- data %>% 
  dplyr::filter(experiment == "Experiment 2") %>% 
  dplyr::select(ID) %>% 
  n_distinct()
  
## demographics
demographics <- data %>%
  dplyr::select(experiment, age, gender, ID) %>% 
  group_by(ID, experiment) %>% 
  distinct() %>% 
  group_by(experiment, gender) %>% 
  summarise(mean_age = mean(age),
            sd_age = sd(age),
            n = n()) %>% 
  mutate(perc_gender = n / sum(n))

## save as html table
DT::datatable(demographics)
```


## Experiment design

![Figure 1 - Experiment Design](plots/figure1-design.png)

Schematic representation of the task screens. a. A round of the estimation task (experiment 1). Participants first observe an image with animals on them for 6 seconds, provide their first estimate of their number (E_1, grey rectangle) and rate their confidence in their estimate on a 1-10 scale. On the next screen, participants observe the estimate of a peer (X, red square), the peer's confidence (highlighted on the scale), and their own first estimate (E_1, white rectangle). Then they provide a second estimate (E_2, grey rectangle). b. A round of the election prediction task (experiment 2). For a US state, participants predict the proportion of Democratic and Republican votes (out of 100; E_1), and rate their confidence as 'Low' or 'High'. On the next screen, they observe the prediction of a peer (X) and their confidence, and make a second prediction (E_2). In both experiments we measure social information use (s) as the relative adjustment from first to second judgments s=((E_2-E_1))/((X-E_1)). When personal and social information are weighted equally, s=0.5. In addition to measuring adjustments in each round, we considered three heuristics: stay (ignore social information; s= 0), compromise (move towards social information, 0\<s\<1) and copy (adopt social information, s=1).

## Main analysis

### Experiment 1


```{r experiment 1, message=FALSE}

load('model_fits/experiment1/model_interaction_beast.RData')
load('model_fits/experiment1/interaction_effect_beast.rda')

## To run the model yourself, uncomment the code below. For more details and tests, check the script scripts/analyses/S_by_confidence_regression.R

# ## select data
# data_beast <- full_dataset %>% 
#   dplyr::filter(experiment == "Experiment 1")
# 
# ## Regression model - experiment 1
# model_interaction_beast <-
#   brms::brm(
#     s ~ confidence_self * confidence_other + (1 |
#                                                 ID),
#     family = gaussian,
#     data = data_beast,
#     cores = 3,
#     chains = 4,
#     iter = 3000
#   )

## save html table of regression results
tab_model(
  model_interaction_beast,
  show.se = TRUE,
  pred.labels = c(
    "Intercept",
    "Confidence Self (High)",
    "Confidence Other (High)",
    "Interaction"
  )
)


```


### Experiment 2


```{r experiment 2,  message=FALSE}

load('model_fits/experiment2/model_interaction_elections.RData')
load('model_fits/experiment2/interaction_effect_elections.rda')


## To run the model yourself, uncomment the code below. For more details and tests, check the script scripts/analyses/S_by_confidence_regression.R

## Regression model - experiment 2
# model_interaction_elections <-
#   brms::brm(
#     s ~ confidence_self * confidence_other + expertise + favorability_fact + same_majority_fact + population + (1|ID),
#     family = gaussian,
#     data = data_elections,
#     cores = 3,
#     chains = 4,
#     iter = 3000
#   )

tab_model(
  model_interaction_elections,
  show.se = TRUE,
  pred.labels = c(
    "Intercept",
    "Confidence Self (High)",
    "Confidence Other (High)",
    "Self-rated expertise",
    "Desirable outcome: yes",
    "Same predicted majority: yes",
    "State population size", 
    "Confidence Self X Confidence Other"
  )
)

```


## Plots

### Figure 2


```{r Figure 2 plots, message=FALSE, warning=FALSE}

## model fit data
load('model_fits/posterior_distributions.rda')

## load raw data
load('data/beast/clean_data/meanS_data_beast.rda')
load('data/elections/clean_data/meanS_data_elections.rda')

## load regression predictions
load('model_fits/experiment1/interaction_effect_beast.rda')
load('model_fits/experiment2/interaction_effect_elections.rda')

##### Figure 1 -----------------------------------------------------------------

## plot posterior distribution of estimated coefficients
plot_br <-
  ggplot(data = posterior_data_combined, aes(x = estimate, y = confidence_f)) +
  stat_slab(
    aes(
      fill = experiment,
      fill_ramp = after_stat(level),
      color = experiment
    ),
    .width = c(.95, 1),
    trim = TRUE,
    slab_alpha = .6
  ) +
  stat_pointinterval(
    aes(color = experiment),
    #point_size = 4,
    position = position_dodge(width = .6, preserve = "single")
  ) +
  scale_fill_manual(values = c("#FFC20A", "#0C7BDC")) +
  scale_color_manual(values = c("#FFC20A", "#0C7BDC")) +
  geom_vline(
    xintercept =  0,
    lwd = .5,
    lty = 2,
    color = 'black'
  ) +
  geom_vline(
    xintercept =  c(-.1, .1),
    lwd = .5,
    lty = 2,
    color = 'darkgrey'
  ) +
  scale_y_discrete(limits = rev) +
  xlim(c(-0.16, 0.18)) +
  theme(
    strip.text.y.left = element_text(angle = 0),
    strip.background = element_blank(),
    #axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major.x = element_blank(),
    legend.position = c(.8, 1),
  ) +
  labs(
    x = 'Estimate',
    y = 'Regression coefficient',
    fill = NULL,
    color = NULL,
    tag = "a"
  ) +
  guides(fill_ramp = 'none')


# PANEL B & c

## load posterior prediction data to add to plot
df_interaction_effect_beast <- df_interaction_effect_beast %>%
  mutate(interaction_f = ordered(c("LL", "LH", "HL", "HH"))) # add treatment factor to match plot axis

df_interaction_effect_elections <-
  df_interaction_effect_elections %>%
  mutate(interaction_f = ordered(c("LL", "LH", "HL", "HH"))) # add treatment factor to match plot axis

## Experiment 1 boxplots
boxplot_beast <- beast_data_2by2 %>%
  ggplot(aes(
    x = (interaction_f),
    y = S,
    fill = interaction_f
  )) +
  geom_half_boxplot(
    nudge = 0,
    errorbar.draw = FALSE,
    outlier.shape = NA,
    width = 0.8,
    size = .8
  ) +
  geom_half_point(
    alpha = .35,
    width = 0.8,
    size = 2,
    aes(color = interaction_f)
  ) +
  stat_summary(
    fun = mean,
    geom = "point",
    shape = 21,
    size = 3,
    stroke = 1.5,
    color = "black",
    fill = "white"
  ) +
  geom_hline(yintercept = .5,
             lty = 2,
             lwd = 1) +  #line of s = .5+
  geom_pointrange(
    data = df_interaction_effect_beast,
    aes(
      x = interaction_f,
      y = estimate__,
      ymin = lower__,
      ymax = upper__,
      fill = interaction_f
    ),
   position = position_nudge(x = .3),
    #geom = "point",
    shape = 24,
    size = .8,
    #stroke = 2,
    color = "black",
    fill = 'white',
    linewidth = 1.5
  ) +
  # scale_x_discrete(labels=c(expression(paste(S[Low] , O[Low])),
  #                           (expression(paste(S[Low] , O[High]))),
  #                           (expression(paste(S[High] , O[Low]))),
  #                           (expression(paste(S[High] , O[High])))
  #                           ))+
  scale_x_discrete(labels = c("Low:Low",
    "Low:High",
    "High:Low",
    "High:High")) +
  
  labs(
    title = 'Experiment 1',
    x = 'Confidence (Self:Other)',
    y =  bquote("Mean adjustment " ~ "(" * bar(S) * ")"),
    
    tag = "b"
  ) +
  
  scale_fill_manual(values = c("#bd5249",
    "#b387c0",
    "#2c90bd",
    "#d8a15a")) +
  scale_color_manual(values = c("#bd5249",
    "#b387c0",
    "#2c90bd",
    "#d8a15a")) +
  theme(legend.position = "none") +
   coord_flip()

####### Experiment 2 boxplots -----

boxplot_elections <- elections_data_2by2 %>%
  ggplot(aes(
    x = (interaction_f),
    y = S,
    fill = interaction_f
  )) +
  geom_half_boxplot(
    nudge = 0,
    errorbar.draw = FALSE,
    outlier.shape = NA,
    width = 0.8,
    size = .8
  ) +
  geom_half_point(
    size = 2,
    alpha = .35,
    width = 0.8,
    aes(color = interaction_f)
  ) +
  geom_pointrange(
    data = df_interaction_effect_elections,
    aes(
      x = interaction_f,
      y = estimate__,
      ymin = lower__,
      ymax = upper__,
      fill = interaction_f
    ),
    position = position_nudge(x = .3),
    #geom = "point",
    shape = 24,
    size = .8,
    #stroke = 2,
    color = "black",
    fill = 'white',
    linewidth = 1.5
  ) +
  stat_summary(
    fun = mean,
    geom = "point",
    shape = 21,
    size = 2.5,
    stroke = 1.5,
    color = "black",
    fill = "white"
  ) +
  labs(
    title = 'Experiment 2',
    x = '',
    y = bquote("Mean adjustment " ~ "(" * bar(S) * ")"),
    tag = "c"
  ) +
  scale_fill_manual(values = c("#bd5249",
    "#b387c0",
    "#2c90bd",
    "#d8a15a")) +
  scale_color_manual(values = c("#bd5249",
    "#b387c0",
    "#2c90bd",
    "#d8a15a")) +
  # scale_x_discrete(labels=c(expression(paste(S[Low] , O[Low])),
  #                           (expression(paste(S[Low] , O[High]))),
  #                           (expression(paste(S[High] , O[Low]))),
  #                           (expression(paste(S[High] , O[High])))
  #  ))+
  scale_x_discrete(labels = c("Low:Low",
    "Low:High",
    "High:Low",
    "High:High")) +
  
  theme(legend.position = "none"
   ) +
  
  geom_hline(yintercept = .5,
    lty = 2,
    lwd = 1) +  #line of s = .5 +
  theme(strip.text.y.left = element_text(angle = 0)) +
  #strip.background = element_blank(),
  # axis.text.y = element_blank(),
  #axis.ticks.y = element_blank())+
  coord_flip()

# ## merge plots together in one
row2 <-
  cowplot::plot_grid(
    boxplot_beast,
    boxplot_elections
  )


fig2 <- cowplot::plot_grid(
  plot_br,
  row2,
  align = "H",
  nrow = 2,
  rel_heights = c(1, 1)
)

fig2
```


Fig. 2. Confidence and social information use. a.  Posterior distributions of regression coefficients estimated with a Bayesian Linear Mixed Model with ‘participant’ as random intercept (see Table S2 & S3 for full model specification and robustness checks). Yellow and blue distributions represent the posterior distribution of estimated coefficients for experiment 1 and 2, respectively. The solid dots and error bars underneath indicate the mean of the distribution, 50% and 95% intervals. The highlighted areas under the curves indicate 95% posterior credible intervals. b-c. Mean adjustments (S ̅) by experimental condition for both experiments. Each dot represents the mean value of s for one participant. Y-axis labels indicate the confidence of the participant and the observed peer, respectively. Open triangles indicate the mean of each experimental treatment estimated from the regression conditional effects, bars indicate upper and lower 95% confidence intervals. Black vertical bars in the boxplots show medians, white dots show means. Dashed black vertical lines indicate the point of equal weighting of personal and social information (S ̅=0.5). Values of S ̅ were mostly below 0.5, even in the Low:High condition (purple dots). For further details on adjustments in individual rounds, see Fig. 3. 


```{r Figure 3, message=FALSE}

## load raw data
load('data/beast/clean_data/heuristics_data_beast.rda')
load('data/elections/clean_data/heuristics_elections_beast.rda')

# make custom palette
palette <- c("#FFFFFF", "#bae4b3", "#74c476", "#238b45", "#000000")


## Experiment 1
heuristic_plot_beast <-
  ggplot(data = heuristics_beast_data, aes(x = interaction_f, y = freq)) +
  geom_col(position = position_stack(reverse = TRUE) ,
           aes(fill = factor(bin)),
           color = 'black')    +
  geom_label(
    aes(label = perc),
    fontface = "bold",
    fill = 'white',
    position = position_stack(vjust = .5),
    size = 8,
  ) +
  labs(title = 'Experiment 1',
       x = "Confidence (Self:Other)",
       y = "Proportion of strategies") +
  scale_fill_manual(
    values = palette,
    name = "Adjustment strategy",
    labels = c('Stay', 'Comp [s<0.5]', "Comp [s=0.5]", "Comp [s>0.5]", "Copy")
  ) +
  scale_x_discrete(labels = c("Low:Low",
                              "Low:High",
                              "High:Low",
                              "High:High")) +
  guides(fill = guide_legend(title.position = "top")) +
  coord_flip()


## Experiment 2
heuristic_plot_elections <-
  ggplot(data = heuristics_elections_data, aes(x = interaction_f, y = freq)) +
  geom_col(position = position_stack(reverse = TRUE) ,
           aes(fill = factor(bin)),
           color = 'black')    +
  geom_label(
    aes(label = perc),
    fontface = "bold",
    fill = 'white',
    position = position_stack(vjust = .5),
    size = 8,
  ) +
  labs(title = 'Experiment 1',
       x = "Confidence (Self:Other)",
       y = "Proportion of strategies") +
  scale_fill_manual(
    values = palette,
    name = "Adjustment strategy",
    labels = c('Stay', 'Comp [s<0.5]', "Comp [s=0.5]", "Comp [s>0.5]", "Copy")
  ) +
  scale_x_discrete(labels = c("Low:Low",
                              "Low:High",
                              "High:Low",
                              "High:High")) +
  guides(fill = guide_legend(title.position = "top")) +
  coord_flip()

## merge plots

heuristic_plot_elections <- heuristic_plot_elections +  labs(x = "")

## save into figure
fig3 <-
  heuristic_plot_beast + heuristic_plot_elections &
  theme(
    legend.position = "bottom",
    panel.grid.major.x = NULL,
    legend.margin = margin(5, 5, 5, ),
    legend.spacing.x = unit(4, "pt"),
    legend.spacing.y = unit(4, "pt"),
    legend.box = NULL
    
  )

## merge guides
fig3 <- fig3 + plot_layout(guides = "collect")
# plot_annotation(tag_levels = 'A') &
# theme(plot.tag = element_text(face = 'bold'))
fig3



```


Fig. 3. Frequencies of heuristic strategies. Bars show the relative frequencies of staying, compromising and copying, broken down by experimental condition. Numbers in white boxes indicate the percentage of cases in each bin. Instances of ‘compromise’ (green bars) are further broken down into cases where participants gave more weight to personal information (s<.5, light green), equal weight to personal and social information (s = .5, intermediate green), or more weight to social information (s >.5; dark green).  For an overview of the strategies broken down by participant, see Fig. S1.



